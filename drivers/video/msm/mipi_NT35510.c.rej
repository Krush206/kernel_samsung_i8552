--- len/msm/mipi_NT35510.c	2014-12-19 10:01:02.000000000 +0000
+++ video/msm/mipi_NT35510.c	2014-07-26 16:43:46.000000000 +0000
@@ -10,259 +10,356 @@
  * GNU General Public License for more details.
  *
  */
-#define DEBUG
 
-#include <mach/socinfo.h>
+#include <linux/lcd.h>
+
+#include <mach/gpio.h>
+#include <mach/pmic.h>
+#include <mach/vreg.h>
 
 #include "msm_fb.h"
 #include "mipi_dsi.h"
 #include "mipi_NT35510.h"
 
+#include "lcdc_backlight_ic.h"
+
 static struct msm_panel_common_pdata *mipi_nt35510_pdata;
 static struct dsi_buf nt35510_tx_buf;
 static struct dsi_buf nt35510_rx_buf;
 
-static int mipi_nt35510_bl_ctrl = 0;
-
-#define NT35510_SLEEP_OFF_DELAY 10
-#define NT35510_DISPLAY_ON_DELAY 0
+/* in msec */
+#define NT35510_RESET_SLEEP_OUT_DELAY 120
+#define NT35510_RESET_SLEEP_IN_DELAY 5
+#define NT35510_SLEEP_IN_DELAY 120
+#define NT35510_SLEEP_OUT_DELAY 5
+#define NT35510_HOLD_RESET 10
+#define NT35510_CMD_SETTLE 0
+#define NT35510_SETTING_SETTLE 0
+
+#define NT35510_USE_DEEP_STANDBY 1
+
+#if (0 == NT35510_USE_DEEP_STANDBY)
+#define NT35510_USE_POWERDOWN 1
+#else /* (0 == NT35510_USE_DEEP_STANDBY) */
+#define NT35510_USE_POWERDOWN 0
+#endif /* (0 == NT35510_USE_DEEP_STANDBY) */
+
+#if defined(CONFIG_APPLY_MDNIE)
+typedef struct mdnie_config {
+	int scenario;
+	int negative;
+	int outdoor;
+};
+struct class *mdnie_class;
+struct mdnie_config mDNIe_cfg;
+static int is_lcd_on=0;
+static void set_mDNIe_Mode(struct mdnie_config *mDNIeCfg);
+#endif
 
 /* common setting */
-static char exit_sleep[2] = {0x11, 0x00};
-static char display_on[2] = {0x29, 0x00};
-static char display_off[2] = {0x28, 0x00};
-static char enter_sleep[2] = {0x10, 0x00};
-static char write_ram[2] = {0x2c, 0x00}; /* write ram */
+static char exit_sleep[] = {0x11, 0x00};
+static char display_on[] = {0x29, 0x00};
+static char display_off[] = {0x28, 0x00};
+static char enter_sleep[] = {0x10, 0x00};
+static char all_pixel_off[] = {0x22, 0x00};
+static char normal_disp_mode_on[] = {0x13, 0x00};
+
+#if (1 == NT35510_USE_DEEP_STANDBY)
+static char deep_standby_on[] = {0x4F, 0x01};
+#endif /* (1 == NT35510_USE_DEEP_STANDBY) */
+static char write_ram[] = {0x2c, 0x00}; /* write ram */
+	
+#if defined(CONFIG_APPLY_MDNIE)
+static char inversion_on[2] = {0x21, 0x00};
+static struct dsi_cmd_desc nt35510_cmd_inversion_on_cmds = {
+	DTYPE_DCS_WRITE1, 1, 0, 0, 0, sizeof(inversion_on), inversion_on};
+
+static char inversion_off[2] = {0x20, 0x00};
+static struct dsi_cmd_desc nt35510_cmd_inversion_off_cmds = {
+	DTYPE_DCS_WRITE, 1, 0, 0, 0, sizeof(inversion_off), inversion_off};
+
+#endif
 
 static struct dsi_cmd_desc nt35510_display_off_cmds[] = {
-	{DTYPE_DCS_WRITE, 1, 0, 0, 50, sizeof(display_off), display_off},
-	{DTYPE_DCS_WRITE, 1, 0, 0, 50, sizeof(enter_sleep), enter_sleep}
+	{DTYPE_DCS_WRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(display_off), display_off},
+	{DTYPE_DCS_WRITE, 1, 0, 0, NT35510_SLEEP_IN_DELAY, sizeof(enter_sleep), enter_sleep}
 };
 
-static char cmd0[6] = {
-	0xF0, 0x55, 0xAA, 0x52,
-	0x08, 0x01,
-};
-static char cmd1[4] = {
-        0xBC, 0x00, 0x80, 0x00,
-};
-static char cmd2[4] = {
-        0xBD, 0x00, 0x80, 0x00,
-};
-static char cmd3[3] = {
-	0xBE, 0x00, 0x79,
-};
-static char cmd4[53] = {
-	0xD1, 0x00, 0x00, 0x00,
-	0x14, 0x00, 0x32, 0x00,
-	0x4F, 0x00, 0x65, 0x00,
-	0x8B, 0x00, 0xA8, 0x00,
-	0xD5, 0x00, 0xF7, 0x01,
-	0x2B, 0x01, 0x54, 0x01,
-	0x8E, 0x01, 0xBB, 0x01,
-	0xBC, 0x01, 0xE3, 0x02,
-	0x08, 0x02, 0x1C, 0x02,
-	0x39, 0x02, 0x4F, 0x02,
-	0x76, 0x02, 0xA3, 0x02,
-	0xE3, 0x03, 0x12, 0x03,
-	0x4C, 0x03, 0x66, 0x03,
-	0x9A,
-};
-static char cmd5[53] = {
-	0xD2, 0x00, 0x00, 0x00,
-	0x14, 0x00, 0x32, 0x00,
-	0x4F, 0x00, 0x65, 0x00,
-	0x8B, 0x00, 0xA8, 0x00,
-	0xD5, 0x00, 0xF7, 0x01,
-	0x2B, 0x01, 0x54, 0x01,
-	0x8E, 0x01, 0xBB, 0x01,
-	0xBC, 0x01, 0xE3, 0x02,
-	0x08, 0x02, 0x1C, 0x02,
-	0x39, 0x02, 0x4F, 0x02,
-	0x76, 0x02, 0xA3, 0x02,
-	0xE3, 0x03, 0x12, 0x03,
-	0x4C, 0x03, 0x66, 0x03,
-	0x9A,
-};
-static char cmd6[53] = {
-	0xD3, 0x00, 0x00, 0x00,
-	0x14, 0x00, 0x32, 0x00,
-	0x4F, 0x00, 0x65, 0x00,
-	0x8B, 0x00, 0xA8, 0x00,
-	0xD5, 0x00, 0xF7, 0x01,
-	0x2B, 0x01, 0x54, 0x01,
-	0x8E, 0x01, 0xBB, 0x01,
-	0xBC, 0x01, 0xE3, 0x02,
-	0x08, 0x02, 0x1C, 0x02,
-	0x39, 0x02, 0x4F, 0x02,
-	0x76, 0x02, 0xA3, 0x02,
-	0xE3, 0x03, 0x12, 0x03,
-	0x4C, 0x03, 0x66, 0x03,
-	0x9A,
-};
-static char cmd7[53] = {
-	0xD4, 0x00, 0x00, 0x00,
-	0x14, 0x00, 0x32, 0x00,
-	0x4F, 0x00, 0x65, 0x00,
-	0x8B, 0x00, 0xA8, 0x00,
-	0xD5, 0x00, 0xF7, 0x01,
-	0x2B, 0x01, 0x54, 0x01,
-	0x8E, 0x01, 0xBB, 0x01,
-	0xBC, 0x01, 0xE3, 0x02,
-	0x08, 0x02, 0x1C, 0x02,
-	0x39, 0x02, 0x4F, 0x02,
-	0x76, 0x02, 0xA3, 0x02,
-	0xE3, 0x03, 0x12, 0x03,
-	0x4C, 0x03, 0x66, 0x03,
-	0x9A,
-};
-static char cmd8[53] = {
-	0xD5, 0x00, 0x00, 0x00,
-	0x14, 0x00, 0x32, 0x00,
-	0x4F, 0x00, 0x65, 0x00,
-	0x8B, 0x00, 0xA8, 0x00,
-	0xD5, 0x00, 0xF7, 0x01,
-	0x2B, 0x01, 0x54, 0x01,
-	0x8E, 0x01, 0xBB, 0x01,
-	0xBC, 0x01, 0xE3, 0x02,
-	0x08, 0x02, 0x1C, 0x02,
-	0x39, 0x02, 0x4F, 0x02,
-	0x76, 0x02, 0xA3, 0x02,
-	0xE3, 0x03, 0x12, 0x03,
-	0x4C, 0x03, 0x66, 0x03,
-	0x9A,
-};
-static char cmd9[53] = {
-	0xD6, 0x00, 0x00, 0x00,
-	0x14, 0x00, 0x32, 0x00,
-	0x4F, 0x00, 0x65, 0x00,
-	0x8B, 0x00, 0xA8, 0x00,
-	0xD5, 0x00, 0xF7, 0x01,
-	0x2B, 0x01, 0x54, 0x01,
-	0x8E, 0x01, 0xBB, 0x01,
-	0xBC, 0x01, 0xE3, 0x02,
-	0x08, 0x02, 0x1C, 0x02,
-	0x39, 0x02, 0x4F, 0x02,
-	0x76, 0x02, 0xA3, 0x02,
-	0xE3, 0x03, 0x12, 0x03,
-	0x4C, 0x03, 0x66, 0x03,
-	0x9A,
-};
-static char cmd10[4] = {
-	0xB0, 0x0A, 0x0A, 0x0A,
-};
-static char cmd11[4] = {
-	0xB1, 0x0A, 0x0A, 0x0A,
-};
-static char cmd12[4] = {
-	0xBA, 0x24, 0x24, 0x24,
-};
-static char cmd13[4] = {
-	0xB9, 0x24, 0x24, 0x24,
-};
-static char cmd14[4] = {
-	0xB8, 0x24, 0x24, 0x24,
-};
-static char cmd15[6] = {
-	0xF0, 0x55, 0xAA, 0x52,
-	0x08, 0x00,
-};
-static char cmd16[2] = {
-	0xB3, 0x00,
-};
-static char cmd17[2] = {
-	0xB4, 0x10,
-};
-static char cmd18[2] = {
-	0xB6, 0x02,
-};
-static char cmd19[3] = {
-	0xB1, 0xEC, 0x00,
-};
-static char cmd19_rotate[3] = {
-	0xB1, 0xEC, 0x06,
-};
-static char cmd20[4] = {
-	0xBC, 0x05, 0x05, 0x05,
-};
-static char cmd21[3] = {
-	0xB7, 0x20, 0x20,
-};
-static char cmd22[5] = {
-	0xB8, 0x01, 0x03, 0x03,
-	0x03,
-};
-static char cmd23[19] = {
-	0xC8, 0x01, 0x00, 0x78,
-	0x50, 0x78, 0x50, 0x78,
-	0x50, 0x78, 0x50, 0xC8,
-	0x3C, 0x3C, 0xC8, 0xC8,
-	0x3C, 0x3C, 0xC8,
-};
-static char cmd24[6] = {
-	0xBD, 0x01, 0x84, 0x07,
-	0x31, 0x00,
-};
-static char cmd25[6] = {
-	0xBE, 0x01, 0x84, 0x07,
-	0x31, 0x00,
-};
-static char cmd26[6] = {
-	0xBF, 0x01, 0x84, 0x07,
-	0x31, 0x00,
-};
-static char cmd27[2] = {
-	0x35, 0x00,
+#if (1 == NT35510_USE_DEEP_STANDBY)
+static struct dsi_cmd_desc nt35510_deep_standby_cmds[] = {
+	{DTYPE_DCS_WRITE1, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(deep_standby_on), deep_standby_on},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 50, sizeof(display_off), display_off},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 50, sizeof(enter_sleep), enter_sleep}
 };
-static char cmd28[12] = {
-        0xF9, 0x0A, 0x00, 0x0E,
-        0x1F, 0x37, 0x55, 0x6E,
-        0x6E, 0x46, 0x28, 0x0E,
-};
-static char config_MADCTL[2] = {0x36, 0x00};
-static struct dsi_cmd_desc nt35510_cmd_display_on_cmds[] = {
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd0), cmd0},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd1), cmd1},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd2), cmd2},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd3), cmd3},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd4), cmd4},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd5), cmd5},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd6), cmd6},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd7), cmd7},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd8), cmd8},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd9), cmd9},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd10), cmd10},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd11), cmd11},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd12), cmd12},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd13), cmd13},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd14), cmd14},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd15), cmd15},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd16), cmd16},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd17), cmd17},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd18), cmd18},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd19), cmd19},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd20), cmd20},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd21), cmd21},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd22), cmd22},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd23), cmd23},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd24), cmd24},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd25), cmd25},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd26), cmd26},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd27), cmd27},
-	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(cmd28), cmd28},
+#endif /* (1 == NT35510_USE_DEEP_STANDBY) */
 
-	{DTYPE_DCS_WRITE, 1, 0, 0, NT35510_SLEEP_OFF_DELAY, sizeof(exit_sleep), exit_sleep},
-	{DTYPE_DCS_WRITE, 1, 0, 0, NT35510_DISPLAY_ON_DELAY, sizeof(display_on), display_on},
-
-	{DTYPE_DCS_WRITE1, 1, 0, 0, 0,
-		sizeof(config_MADCTL), config_MADCTL},
-
-	{DTYPE_DCS_WRITE, 1, 0, 0, 0,	sizeof(write_ram), write_ram},
+// kiyong17.kim  12.12.5
+/*Power Setting*/
+static char cmd1[] = {
+        0xF0,
+        0x55, 0xAA, 0x52, 0x08, 0x01
+};
+static char cmd2[] = {
+	0xB0,
+        0x09, 0x09, 0x09
+};
+static char cmd3[] = {
+	0xB6,
+        0x34, 0x34, 0x34
+};
+static char cmd4[] = {
+	0xB1,
+        0x09, 0x09, 0x09
+};
+static char cmd5[] = {
+	0xB7,
+        0x24, 0x24, 0x24
+};
+static char cmd6[] = {
+	0xB3,
+        0x05, 0x05, 0x05
+};
+static char cmd7[] = {
+	0xB9,
+        0x24, 0x24, 0x24
+};
+static char cmd8[] = {
+	0xBF,
+        0x01
+};
+static char cmd9[] = {
+	0xB5,
+        0x0b, 0x0b, 0x0b,
+};
+static char cmd10[] = {
+	0xBA,
+        0x24, 0x24, 0x24
+};
+static char cmd11[] = {
+	0xBC,
+        0x00, 0xA3, 0x00
+};
+static char cmd12[] = {
+	0xBD,
+        0x00, 0xA3, 0x00
+};
+
+
+/* Display Setting */
+static char cmd13[] = {
+	0xF0,
+        0x55, 0xAA, 0x52, 0x08, 0x00
+};
+
+static char cmd14[] = {
+	0xBD,
+        0x01, 0x84, 0x07, 0x32, 0x00
+};
+
+static char cmd15[] = {
+	0x36,
+        0x02
+};
+static char cmd16[] = {
+	0xB6,
+        0x0A
+};
+static char cmd17[] = {
+	0xB7,
+        0x00, 0x00
+};
+static char cmd18[] = {
+	0xB8,
+        0x01, 0x05, 0x05, 0x05
+};
+static char cmd19[] = {
+	0xBA,
+        0x01,
+};
+static char cmd_rotate[3] = {
+	0xB1,
+        0x4C, 0x04
+};
+static char cmd20[] = {
+	0xBE,
+        0x01, 0x84, 0x07, 0x31, 0x00
+};
+static char cmd21[] = {
+	0xBF,
+        0x01, 0x84, 0x07, 0x31, 0x00
+};
+static char cmd22[] = {
+	0x35,
+        0x00
+};
+static char cmd23[] = {
+	0xCC,
+        0x03, 0x00, 0x00,
+};
+
+
+/* Gamma Control */
+static char cmd26[] = {
+	0xD1,
+        0x00, 0x01, 0x00, 0x43, 0x00, 0x6B, 0x00, 0x87,
+        0x00, 0xA3, 0x00, 0xCE, 0x00, 0xF1, 0x01, 0x27,
+        0x01, 0x53, 0x01, 0x98, 0x01, 0xCE, 0x02, 0x22,
+        0x02, 0x83, 0x02, 0x78, 0x02, 0x9E, 0x02, 0xDD,
+        0x03, 0x00, 0x03, 0x2E, 0x03, 0x54, 0x03, 0x7F,
+        0x03, 0x95, 0x03, 0xB3, 0x03, 0xC2, 0x03, 0xE1,
+        0x03, 0xF1, 0x03, 0xFE
+};
+static char cmd27[] = {
+        0xD2,
+         0x00, 0x01, 0x00, 0x43, 0x00, 0x6B, 0x00, 0x87,
+        0x00, 0xA3, 0x00, 0xCE, 0x00, 0xF1, 0x01, 0x27,
+        0x01, 0x53, 0x01, 0x98, 0x01, 0xCE, 0x02, 0x22,
+        0x02, 0x83, 0x02, 0x78, 0x02, 0x9E, 0x02, 0xDD,
+        0x03, 0x00, 0x03, 0x2E, 0x03, 0x54, 0x03, 0x7F,
+        0x03, 0x95, 0x03, 0xB3, 0x03, 0xC2, 0x03, 0xE1,
+        0x03, 0xF1, 0x03, 0xFE
+};
+static char cmd28[] = {
+	0xD3,
+         0x00, 0x01, 0x00, 0x43, 0x00, 0x6B, 0x00, 0x87,
+        0x00, 0xA3, 0x00, 0xCE, 0x00, 0xF1, 0x01, 0x27,
+        0x01, 0x53, 0x01, 0x98, 0x01, 0xCE, 0x02, 0x22,
+        0x02, 0x83, 0x02, 0x78, 0x02, 0x9E, 0x02, 0xDD,
+        0x03, 0x00, 0x03, 0x2E, 0x03, 0x54, 0x03, 0x7F,
+        0x03, 0x95, 0x03, 0xB3, 0x03, 0xC2, 0x03, 0xE1,
+        0x03, 0xF1, 0x03, 0xFE
+};
+static char cmd29[] = {
+	0xD4, 
+        0x00, 0x01, 0x00, 0x43, 0x00, 0x6B, 0x00, 0x87,
+        0x00, 0xA3, 0x00, 0xCE, 0x00, 0xF1, 0x01, 0x27,
+        0x01, 0x53, 0x01, 0x98, 0x01, 0xCE, 0x02, 0x22,
+        0x02, 0x43, 0x02, 0x50, 0x02, 0x9E, 0x02, 0xDD,
+        0x03, 0x00, 0x03, 0x2E, 0x03, 0x54, 0x03, 0x7F,
+        0x03, 0x95, 0x03, 0xB3, 0x03, 0xC2, 0x03, 0xE1,
+        0x03, 0xF1, 0x03, 0xFE,
+};
+static char cmd30[] = {
+	0xD5,
+        0x00, 0x01, 0x00, 0x43, 0x00, 0x6B, 0x00, 0x87,
+        0x00, 0xA3, 0x00, 0xCE, 0x00, 0xF1, 0x01, 0x27,
+        0x01, 0x53, 0x01, 0x98, 0x01, 0xCE, 0x02, 0x22,
+        0x02, 0x43, 0x02, 0x50, 0x02, 0x9E, 0x02, 0xDD,
+        0x03, 0x00, 0x03, 0x2E, 0x03, 0x54, 0x03, 0x7F,
+        0x03, 0x95, 0x03, 0xB3, 0x03, 0xC2, 0x03, 0xE1,
+        0x03, 0xF1, 0x03, 0xFE,
+};
+static char cmd31[] = {
+	0xD6,
+         0x00, 0x01, 0x00, 0x43, 0x00, 0x6B, 0x00, 0x87,
+        0x00, 0xA3, 0x00, 0xCE, 0x00, 0xF1, 0x01, 0x27,
+        0x01, 0x53, 0x01, 0x98, 0x01, 0xCE, 0x02, 0x22,
+        0x02, 0x43, 0x02, 0x50, 0x02, 0x9E, 0x02, 0xDD,
+        0x03, 0x00, 0x03, 0x2E, 0x03, 0x54, 0x03, 0x7F,
+        0x03, 0x95, 0x03, 0xB3, 0x03, 0xC2, 0x03, 0xE1,
+        0x03, 0xF1, 0x03, 0xFE,
+};
+
+static char nt35510_boe_dummy_data[] = {
+	0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,	
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+static char nt35510_boe_eng1[] = {
+	0xFF,
+	0xAA, 0x55, 0x25, 0x01
+};
+
+
+static char nt35510_boe_eng2[] = {
+	0xFC,
+	0x06, 0xA0, 0x24, 0x00,
+	0x3C, 0x00, 0x04, 0x80,
+	0x10
+};
+
+
+static char nt35510_boe_eng3[] = {
+	0xF8,
+	0x01, 0x02, 0x00, 0x20, 0x33,
+	0x13, 0x00, 0x40, 0x00, 0x00,
+	0x23, 0x02, 0x19, 0xC8, 0x00,
+	0x00,0x11
+};
+
+
+static struct dsi_cmd_desc nt35510_boe_cmd_dummy[] = {
+	{DTYPE_DCS_WRITE, 1, 0, 0, NT35510_CMD_SETTLE,
+	sizeof(nt35510_boe_dummy_data), nt35510_boe_dummy_data}
+};
+
+
+static struct dsi_cmd_desc nt35510_cmd_display_on_kyleplus_exit_sleep[] = {
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(exit_sleep), exit_sleep},
+};
+
+static struct dsi_cmd_desc nt35510_cmd_display_on_kyleplus1[] = {
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd1), cmd1},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd2), cmd2},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd3), cmd3},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd4), cmd4},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd5), cmd5},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd6), cmd6},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd7), cmd7},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd8), cmd8},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd9), cmd9},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd10), cmd10},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd11), cmd11},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd12), cmd12},
+};
+
+static struct dsi_cmd_desc nt35510_cmd_display_on_kyleplus2[] = {		
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd26), cmd26},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd27), cmd27},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd28), cmd28},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd29), cmd29},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd30), cmd30},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd31), cmd31},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd13), cmd13},
+
+};
+
+static struct dsi_cmd_desc nt35510_cmd_display_on_kyleplus3[] = {		
+//	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd_rotate), cmd_rotate},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd15), cmd15},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd16), cmd16},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd17), cmd17},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd18), cmd18},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd19), cmd19},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd14), cmd14},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd20), cmd20},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd21), cmd21},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd22), cmd22},
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(cmd23), cmd23},
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(all_pixel_off), all_pixel_off},
+#endif
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(display_on), display_on},
+};
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+static struct dsi_cmd_desc nt35510_cmd_unblank[] = {
+	// don't use display_on command, because it causes flash
+	{DTYPE_GEN_LWRITE, 1, 0, 0, NT35510_CMD_SETTLE, sizeof(normal_disp_mode_on), normal_disp_mode_on},
 };
-
+#endif
 static struct dsi_cmd_desc nt35510_cmd_display_on_cmds_rotate[] = {
-	{DTYPE_DCS_LWRITE, 1, 0, 0, 10,
-		sizeof(cmd19_rotate), cmd19_rotate},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0, sizeof(cmd_rotate), cmd_rotate},
 };
 
 static char video0[6] = {
@@ -270,10 +367,10 @@
 	0x08, 0x01,
 };
 static char video1[4] = {
-        0xBC, 0x00, 0x80, 0x00,
+	0xBC, 0x00, 0xA0, 0x00,
 };
 static char video2[4] = {
-        0xBD, 0x00, 0x80, 0x00,
+	0xBD, 0x00, 0xA0, 0x00,
 };
 static char video3[3] = {
 	0xBE, 0x00, 0x79,
@@ -403,9 +500,6 @@
 	0xB6, 0x02,
 };
 static char video19[3] = {
-	0xB1, 0xFC, 0x00,
-};
-static char video19_rotate[3] = {
 	0xB1, 0xFC, 0x06,
 };
 static char video20[4] = {
@@ -440,7 +534,7 @@
 static char video27[2] = {
 	0x35, 0x00,
 };
-
+static char config_video_MADCTL[2] = {0x36, 0xC0};
 static struct dsi_cmd_desc nt35510_video_display_on_cmds[] = {
 	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(video0), video0},
 	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(video1), video1},
@@ -470,24 +564,167 @@
 	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(video25), video25},
 	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(video26), video26},
 	{DTYPE_GEN_LWRITE, 1, 0, 0, 0, sizeof(video27), video27},
-	{DTYPE_DCS_WRITE, 1, 0, 0, NT35510_SLEEP_OFF_DELAY, sizeof(exit_sleep),
+	{DTYPE_DCS_WRITE, 1, 0, 0, NT35510_SLEEP_OUT_DELAY, sizeof(exit_sleep),
 			exit_sleep},
-	{DTYPE_DCS_WRITE, 1, 0, 0, NT35510_DISPLAY_ON_DELAY, sizeof(display_on),
-			display_on},
+	{DTYPE_DCS_WRITE, 1, 0, 0, NT35510_CMD_SETTLE,
+	 sizeof(display_on), display_on},
 };
 
 static struct dsi_cmd_desc nt35510_video_display_on_cmds_rotate[] = {
-	{DTYPE_DCS_LWRITE, 1, 0, 0, 10,
-		sizeof(video19_rotate), video19_rotate},
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 150,
+		sizeof(config_video_MADCTL), config_video_MADCTL},
 };
+extern unsigned int board_hw_revision;
+static int lcd_reset = 0;
+
+#define VREG_ENABLE	TRUE
+#define VREG_DISABLE	FALSE
+
+#define LCDC_DEBUG
+
+#ifdef LCDC_DEBUG
+#define DPRINT(x...)	printk(KERN_ERR "NT35510 " x)
+#else
+#define DPRINT(x...)
+#endif
+
+static void nt35510_vreg_config(boolean vreg_en)
+{
+	int rc;
+	struct vreg *vreg_lcd = NULL;
+
+	DPRINT("start %s\n", __func__);
+	if (vreg_lcd == NULL) {
+		vreg_lcd = vreg_get(NULL, "vlcd");
+
+		if (IS_ERR(vreg_lcd)) {
+			printk(KERN_ERR "%s: vreg_get(%s) failed (%ld)\n",
+				__func__, "vlcd4", PTR_ERR(vreg_lcd));
+			return;
+		}
+
+		rc = vreg_set_level(vreg_lcd, 3000);
+		if (rc) {
+			printk(KERN_ERR "%s: LCD set_level failed (%d)\n",
+				__func__, rc);
+		}
+	}
+
+	if (vreg_en) {
+		rc = vreg_enable(vreg_lcd);
+		if (rc) {
+			printk(KERN_ERR "%s: LCD enable failed (%d)\n",
+				 __func__, rc);
+		} else {
+			printk(KERN_ERR "%s: LCD enable success (%d)\n",
+				 __func__, rc);
+		}
+	} else {
+		rc = vreg_disable(vreg_lcd);
+		if (rc) {
+			printk(KERN_ERR "%s: LCD disable failed (%d)\n",
+				 __func__, rc);
+		} else {
+			printk(KERN_ERR "%s: LCD disable success (%d)\n",
+				 __func__, rc);
+		}
+	}
+}
+
+static void nt35510_disp_reset(boolean special_case, boolean sleep_in)
+{
+        /* appsbl leaves LCD powered up */
+        static boolean first_time = TRUE;
+        if(TRUE == first_time) {
+                first_time = FALSE;
+                return;
+        }
+
+	DPRINT("start %s\n", __func__);
+#if !defined(CONFIG_MACH_KYLEPLUS_CTC)
+	gpio_tlmm_config(GPIO_CFG(lcd_reset, 0, GPIO_CFG_OUTPUT
+				, GPIO_CFG_NO_PULL
+				, GPIO_CFG_2MA)
+				, GPIO_CFG_ENABLE);
+#endif
+	if (special_case) {
+		gpio_set_value(lcd_reset, 0);
+		msleep(NT35510_HOLD_RESET);
+		gpio_set_value(lcd_reset, 1);
+		msleep(sleep_in ? NT35510_RESET_SLEEP_IN_DELAY : NT35510_RESET_SLEEP_OUT_DELAY);
+	}
+	gpio_set_value(lcd_reset, 0);
+	msleep(NT35510_HOLD_RESET);
+	gpio_set_value(lcd_reset, 1);
+	msleep(sleep_in ? NT35510_RESET_SLEEP_IN_DELAY : NT35510_RESET_SLEEP_OUT_DELAY);
+}
+
+#if (1 == NT35510_USE_DEEP_STANDBY)
+static void nt35510_disp_enter_deep_standby(
+                struct msm_fb_data_type *mfd,
+                struct dsi_buf *buf
+                                           )
+{
+        mipi_dsi_cmds_tx(
+                buf, 
+                nt35510_deep_standby_cmds,
+                ARRAY_SIZE(nt35510_deep_standby_cmds)
+                        );
+}
+
+static void nt35510_disp_exit_deep_standby(void)
+{
+        /* LCD must've been in sleep to deep standby */
+        nt35510_disp_reset(FALSE, TRUE);
+}
+#endif /* (1 == NT35510_USE_DEEP_STANDBY) */
+
+#if (1 == NT35510_USE_POWERDOWN)
+static void nt35510_disp_powerup(void)
+{
+	DPRINT("start %s\n", __func__);
+        nt35510_vreg_config(VREG_ENABLE);
+
+        /* after vdd and vddi are enabled we are @ sleep in */
+        nt35510_disp_reset(FALSE, TRUE);
+}
+
+static void nt35510_disp_powerdown(void)
+{
+	DPRINT("start %s\n", __func__);
+
+        /* nt35510_disp_powerdown called after sleep in */
+        nt35510_disp_reset(FALSE, TRUE);
+	nt35510_vreg_config(VREG_DISABLE);
+}
+#endif /* (1 == NT35510_USE_POWERDOWN) */
+
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+static void mipi_nt35510_unblank(struct platform_device *pdev)
+{
+	struct msm_fb_data_type *mfd;
+	struct mipi_panel_info *mipi;
+
+	mfd = platform_get_drvdata(pdev);
+	mipi  = &mfd->panel_info.mipi;
+	
+	DPRINT("%s +:\n", __func__);
+	if (mipi->mode == DSI_CMD_MODE) {
+		mipi_dsi_cmd_mdp_busy();		
+		mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_cmd_unblank, ARRAY_SIZE(nt35510_cmd_unblank));
+	}
+	DPRINT("%s -:\n", __func__);
+}
+#endif
 
 static int mipi_nt35510_lcd_on(struct platform_device *pdev)
 {
 	struct msm_fb_data_type *mfd;
 	struct mipi_panel_info *mipi;
-	static int rotate;
+	int rotate = 1;
+        int ret = 0;
 
-	pr_debug("mipi_nt35510_lcd_on E\n");
+	DPRINT("start %s\n", __func__);
 
 	mfd = platform_get_drvdata(pdev);
 	if (!mfd)
@@ -512,7 +755,6 @@
 	if (mipi_nt35510_pdata && mipi_nt35510_pdata->rotate_panel)
 		rotate = mipi_nt35510_pdata->rotate_panel();
 
-        pr_debug("%s: mode = %d\n", __func__, mipi->mode);
 	if (mipi->mode == DSI_VIDEO_MODE) {
 		mipi_dsi_cmds_tx(&nt35510_tx_buf,
 			nt35510_video_display_on_cmds,
@@ -524,27 +766,54 @@
 			ARRAY_SIZE(nt35510_video_display_on_cmds_rotate));
 		}
 	} else if (mipi->mode == DSI_CMD_MODE) {
-		mipi_dsi_cmds_tx(&nt35510_tx_buf,
-			nt35510_cmd_display_on_cmds,
-			ARRAY_SIZE(nt35510_cmd_display_on_cmds));
-
+		
+		ret = mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_cmd_display_on_kyleplus_exit_sleep, ARRAY_SIZE(nt35510_cmd_display_on_kyleplus_exit_sleep));
+		if(ret==0)
+			goto MIPI_ERROR;
+		mdelay(5);
+		ret = mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_cmd_display_on_kyleplus1, ARRAY_SIZE(nt35510_cmd_display_on_kyleplus1));
+		if(ret==0)
+			goto MIPI_ERROR;
+		ret = mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_cmd_display_on_kyleplus2, ARRAY_SIZE(nt35510_cmd_display_on_kyleplus2));
+		if(ret==0)
+			goto MIPI_ERROR;
 		if (rotate) {
-			mipi_dsi_cmds_tx(&nt35510_tx_buf,
+			ret = mipi_dsi_cmds_tx(&nt35510_tx_buf,
 				nt35510_cmd_display_on_cmds_rotate,
 			ARRAY_SIZE(nt35510_cmd_display_on_cmds_rotate));
+			if(ret==0)
+			goto MIPI_ERROR;
 		}
+		ret = mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_cmd_display_on_kyleplus3, ARRAY_SIZE(nt35510_cmd_display_on_kyleplus3));
+		if(ret==0)
+			goto MIPI_ERROR;
+
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+		// delay to avoid flash caused by display_on command, 
+		// it work with msm_fb_blank_sub() backlight protection
+		msleep(160);
+#endif
 	}
+	
+#if defined(CONFIG_APPLY_MDNIE)
+	is_lcd_on = 1;
+	set_mDNIe_Mode(&mDNIe_cfg);
+#endif
 
-	pr_debug("mipi_nt35510_lcd_on X\n");
-
+	DPRINT("exit %s\n", __func__);
 	return 0;
+	
+MIPI_ERROR:
+	DPRINT("%s MIPI_ERROR -\n", __func__);
+	return ret;
 }
-
 static int mipi_nt35510_lcd_off(struct platform_device *pdev)
 {
 	struct msm_fb_data_type *mfd;
 
-	pr_debug("mipi_nt35510_lcd_off E\n");
+	static int b_first_off=1;
+
+	DPRINT("start %s\n", __func__);
 
 	mfd = platform_get_drvdata(pdev);
 
@@ -552,93 +821,178 @@
 		return -ENODEV;
 	if (mfd->key != MFD_KEY)
 		return -EINVAL;
+	
+#if !defined(CONFIG_MACH_KYLEPLUS_CTC) && !defined(CONFIG_MACH_KYLEPLUS_OPEN) && !defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+	backlight_ic_set_brightness(0);
+#endif	
+	if(b_first_off)	// workaround.
+	{
+		nt35510_disp_exit_deep_standby();
+
+		msleep(20);
+
+		mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_cmd_display_on_kyleplus_exit_sleep, ARRAY_SIZE(nt35510_cmd_display_on_kyleplus_exit_sleep));
+		mdelay(120);
+		mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_cmd_display_on_kyleplus1, ARRAY_SIZE(nt35510_cmd_display_on_kyleplus1));
+		mdelay(120);
+		mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_cmd_display_on_kyleplus2, ARRAY_SIZE(nt35510_cmd_display_on_kyleplus2));
+		if (1) {
+			mipi_dsi_cmds_tx(&nt35510_tx_buf,
+				nt35510_cmd_display_on_cmds_rotate,
+			ARRAY_SIZE(nt35510_cmd_display_on_cmds_rotate));
+		}
+		mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_cmd_display_on_kyleplus3, ARRAY_SIZE(nt35510_cmd_display_on_kyleplus3));
+		mdelay(10);	
+		
+		msleep(20);
+		b_first_off=0;
+	}
+			
+	
+	
+#if defined(CONFIG_APPLY_MDNIE)
+	is_lcd_on = 0;
+#endif
+
+#if defined(CONFIG_FB_MSM_MIPI_CMD_PANEL_AVOID_MOSAIC) || defined(CONFIG_MACH_KYLEPLUS_OPEN) || defined(CONFIG_MACH_INFINITE_DUOS_CTC)
+	// let screen light off smoothly, because backlight is turning off in another thread now
+	msleep(80);
+#endif
 
 	mipi_dsi_cmds_tx(&nt35510_tx_buf, nt35510_display_off_cmds,
 			ARRAY_SIZE(nt35510_display_off_cmds));
+#if (1 == NT35510_USE_DEEP_STANDBY)
+        nt35510_disp_enter_deep_standby(mfd, &nt35510_tx_buf);
+#endif /* (1 == NT35510_USE_DEEP_STANDBY) */
+#if (1 == NT35510_USE_POWERDOWN)
+        nt35510_disp_powerdown();
+#endif /* (1 == NT35510_USE_POWERDOWN) */
 
-	pr_debug("mipi_nt35510_lcd_off X\n");
+	DPRINT("exit %s\n", __func__);
 	return 0;
 }
 
-static ssize_t mipi_nt35510_wta_bl_ctrl(struct device *dev,
-	struct device_attribute *attr, const char *buf, size_t count)
+
+static ssize_t mipi_nt35510_lcdtype_show(struct device *dev, 
+        struct device_attribute *attr, char *buf)
 {
-	ssize_t ret = strnlen(buf, PAGE_SIZE);
-	int err;
+        char temp[20];
+        sprintf(temp, "INH_GH96-05884A\n");
+        strcat(buf, temp);
+        return strlen(buf);
+}
 
-	err =  kstrtoint(buf, 0, &mipi_nt35510_bl_ctrl);
-	if (err)
-		return ret;
+/* FIXME: add handlers */
+static struct lcd_ops mipi_lcd_props;
+static DEVICE_ATTR(lcd_type, S_IRUGO, mipi_nt35510_lcdtype_show, NULL);
+#if defined(CONFIG_APPLY_MDNIE)
+static void set_mDNIe_Mode(struct mdnie_config *mDNIeCfg)
+{
+	int value;
 
-	pr_info("%s: bl ctrl set to %d\n", __func__, mipi_nt35510_bl_ctrl);
+	DPRINT("%s +:[mDNIe] negative=%d\n", __func__, mDNIe_cfg.negative);
+	if(!is_lcd_on)
+		return;
+	mipi_dsi_cmd_mdp_busy();		
+	if (mDNIe_cfg.negative) {
+		mipi_dsi_cmds_tx(&nt35510_tx_buf, &nt35510_cmd_inversion_on_cmds, 1);
+	} else {
+		mipi_dsi_cmds_tx(&nt35510_tx_buf, &nt35510_cmd_inversion_off_cmds, 1);
+	}
+	DPRINT("%s -:[mDNIe]", __func__);
 
-	return ret;
 }
 
-static DEVICE_ATTR(bl_ctrl, S_IWUSR, NULL, mipi_nt35510_wta_bl_ctrl);
-
-static struct attribute *mipi_nt35510_fs_attrs[] = {
-	&dev_attr_bl_ctrl.attr,
-	NULL,
-};
+static ssize_t mDNIeNegative_show(struct device *dev,
+        struct device_attribute *attr, char *buf)
 
-static struct attribute_group mipi_nt35510_fs_attr_group = {
-	.attrs = mipi_nt35510_fs_attrs,
-};
+{
+    int ret = 0;
+    ret = sprintf(buf,"mDNIeNegative_show : %d\n", mDNIe_cfg.negative);
 
-static int mipi_nt35510_create_sysfs(struct platform_device *pdev)
+    return ret;
+}
+static ssize_t mDNIeNegative_store(struct device *dev,
+        struct device_attribute *attr, const char *buf, size_t size)
 {
-	int rc;
-	struct msm_fb_data_type *mfd = platform_get_drvdata(pdev);
+	unsigned int value;
+	int ret;
 
-	if (!mfd) {
-		pr_err("%s: mfd not found\n", __func__);
-		return -ENODEV;
-	}
-	if (!mfd->fbi) {
-		pr_err("%s: mfd->fbi not found\n", __func__);
-		return -ENODEV;
-	}
-	if (!mfd->fbi->dev) {
-		pr_err("%s: mfd->fbi->dev not found\n", __func__);
-		return -ENODEV;
-	}
-	rc = sysfs_create_group(&mfd->fbi->dev->kobj,
-		&mipi_nt35510_fs_attr_group);
-	if (rc) {
-		pr_err("%s: sysfs group creation failed, rc=%d\n",
-			__func__, rc);
-		return rc;
-	}
+	ret = strict_strtoul(buf, 0, (unsigned long *)&value);
 
-	return 0;
+	DPRINT("%s:value=%d\n", __func__, value);
+
+	if(value == 1) {
+		mDNIe_cfg.negative = 1;
+	} else {
+		mDNIe_cfg.negative = 0;
+	}
+	
+	set_mDNIe_Mode(&mDNIe_cfg);
+    return size;
 }
 
+static DEVICE_ATTR(negative, 0664, mDNIeNegative_show, mDNIeNegative_store);
+#endif
+
 static int __devinit mipi_nt35510_lcd_probe(struct platform_device *pdev)
 {
-	struct platform_device *pthisdev = NULL;
+	struct lcd_device *lcd_device;
 	struct msm_fb_panel_data *pdata;
-	pr_debug("%s\n", __func__);
+	int ret;
+#if defined(CONFIG_APPLY_MDNIE)
+	struct class *mdnie_class;
+	struct device *mdnie_device;
+#endif
+
+	DPRINT("%s\n", __func__);
 
 	if (pdev->id == 0) {
 		mipi_nt35510_pdata = pdev->dev.platform_data;
-		if (mipi_nt35510_pdata->bl_lock)
-			spin_lock_init(&mipi_nt35510_pdata->bl_spinlock);
-
-                /* PVT use PWM as backlight control method */
-                if((machine_is_msm8625_qrd5() && hw_version_is(3, 0)) || machine_is_msm7x27a_qrd5a())
-                        mipi_nt35510_bl_ctrl = 1;
-
 		return 0;
 	}
 
+	msm_fb_add_device(pdev);
+	lcd_device = lcd_device_register("panel", &pdev->dev, NULL,
+					&mipi_lcd_props);
 	pdata = pdev->dev.platform_data;
 	if (mipi_nt35510_pdata && mipi_nt35510_pdata->rotate_panel()
 			&& pdata->panel_info.type == MIPI_CMD_PANEL)
 		pdata->panel_info.lcd.refx100 = 6200;
 
-	pthisdev = msm_fb_add_device(pdev);
-	mipi_nt35510_create_sysfs(pthisdev);
+	if (IS_ERR(lcd_device)) {
+		ret = PTR_ERR(lcd_device);
+		printk(KERN_ERR "lcd : failed to register device\n");
+		return ret;
+	}
+
+	ret = sysfs_create_file(&lcd_device->dev.kobj, &dev_attr_lcd_type.attr);
+	if (ret)
+		printk(KERN_ERR "sysfs create fail - %s\n",
+		dev_attr_lcd_type.attr.name);
+	
+#if defined(CONFIG_APPLY_MDNIE)
+	mDNIe_cfg.negative = 0;
+
+	mdnie_class = class_create(THIS_MODULE, "mdnie");
+	if (IS_ERR(mdnie_class)) {
+		ret = PTR_ERR(mdnie_class);
+		printk(KERN_ERR "mdnie : failed to register class\n");
+		return ret;
+	}
+
+	mdnie_device = device_create(mdnie_class, NULL, 0, NULL, "mdnie");
+	if (IS_ERR(mdnie_device)) {
+		ret = PTR_ERR(mdnie_device);
+		printk(KERN_ERR "mdnie : failed to register device\n");
+		return ret;
+	}
+
+	ret = device_create_file(mdnie_device, &dev_attr_negative);
+	if(ret < 0)
+		printk(KERN_ERR "sysfs create fail - %s\n",
+		dev_attr_negative.attr.name);
+#endif
 
 	return 0;
 }
