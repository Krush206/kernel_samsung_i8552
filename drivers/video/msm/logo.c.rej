--- len/msm/logo.c	2014-12-19 10:01:02.000000000 +0000
+++ video/msm/logo.c	2014-07-26 16:43:46.000000000 +0000
@@ -23,6 +23,12 @@
 
 #include <linux/irq.h>
 #include <asm/system.h>
+#include <asm/cacheflush.h>
+#include "msm_fb.h"
+
+#if defined(CONFIG_MACH_ROY)
+#include "lcdc_backlight_ic.h"
+#endif
 
 #define fb_width(fb)	((fb)->var.xres)
 #define fb_height(fb)	((fb)->var.yres)
@@ -36,6 +42,26 @@
 		*ptr++ = val;
 }
 
+/* convert RGB565 to RBG8888 */
+static void memset16_rgb8888(void *_ptr, unsigned short val, unsigned count)
+{
+	unsigned short *ptr = _ptr;
+	unsigned short red;
+	unsigned short green;
+	unsigned short blue;
+
+	red = ( val & 0xF800) >> 8;
+	green = (val & 0x7E0) >> 3;
+	blue = (val & 0x1F) << 3;
+
+	count >>= 1;
+	while (count--) {
+		*ptr++ = (red<<8) | green;
+		*ptr++ = blue;
+	}
+}
+
+extern int mdp_resource_initialized;
 /* 565RLE image format: [count(2 bytes), rle(2 bytes)] */
 int load_565rle_image(char *filename, bool bf_supported)
 {
@@ -43,6 +69,9 @@
 	int fd, count, err = 0;
 	unsigned max;
 	unsigned short *data, *bits, *ptr;
+#ifndef CONFIG_FRAMEBUFFER_CONSOLE
+	struct module *owner;
+#endif
 
 	info = registered_fb[0];
 	if (!info) {
@@ -51,6 +80,19 @@
 		return -ENODEV;
 	}
 
+#ifndef CONFIG_FRAMEBUFFER_CONSOLE
+	while(!mdp_resource_initialized) {
+		msleep(10);
+	}
+	owner = info->fbops->owner;
+	if (!try_module_get(owner))
+		return -ENODEV;
+	if (info->fbops->fb_open && info->fbops->fb_open(info, 0)) {
+		module_put(owner);
+		return -ENODEV;
+	}
+#endif
+
 	fd = sys_open(filename, O_RDONLY, 0);
 	if (fd < 0) {
 		printk(KERN_WARNING "%s: Can not open %s\n",
@@ -87,13 +129,26 @@
 		unsigned n = ptr[0];
 		if (n > max)
 			break;
-		memset16(bits, ptr[1], n << 1);
-		bits += n;
+		if (info->var.bits_per_pixel >= 24) { /* rgb888 */
+			memset16_rgb8888(bits, ptr[1], n << 1);
+			bits += n * 2;
+		} else {
+			memset16(bits, ptr[1], n << 1);
+			bits += n;
+		}
 		max -= n;
 		ptr += 2;
 		count -= 4;
 	}
 
+	flush_cache_all();
+	outer_flush_all();
+
+#if defined(CONFIG_MACH_ROY) && !defined(CONFIG_MACH_NEVIS3G)
+	msleep(25);
+	backlight_ic_set_brightness(160);
+#endif
+
 err_logo_free_data:
 	kfree(data);
 err_logo_close_file:
@@ -101,3 +156,71 @@
 	return err;
 }
 EXPORT_SYMBOL(load_565rle_image);
+
+int draw_rgb888_screen(void)
+{
+	struct fb_info *fb = registered_fb[0];
+	u32 height = fb->var.yres / 5;
+	u32 line = fb->fix.line_length;
+	u32 i, j;
+#ifndef CONFIG_FRAMEBUFFER_CONSOLE	
+	struct module *owner;
+
+	owner = fb->fbops->owner;
+	if (!try_module_get(owner))
+		return -ENODEV;
+	if (fb->fbops->fb_open && fb->fbops->fb_open(fb, 0)) {
+		module_put(owner);
+		return -ENODEV;
+	}
+#endif	
+	
+	for (i = 0; i < height; i++) {
+		for (j = 0; j < fb->var.xres; j++) {
+			memset(fb->screen_base + i * line + j * 4 + 0, 0xff, 1);
+			memset(fb->screen_base + i * line + j * 4 + 1, 0x00, 1);
+			memset(fb->screen_base + i * line + j * 4 + 2, 0x00, 1);
+			memset(fb->screen_base + i * line + j * 4 + 3, 0x00, 1);
+		}
+	}
+
+	for (i = height; i < height * 2; i++) {
+		for (j = 0; j < fb->var.xres; j++) {
+			memset(fb->screen_base + i * line + j * 4 + 0, 0x00, 1);
+			memset(fb->screen_base + i * line + j * 4 + 1, 0xff, 1);
+			memset(fb->screen_base + i * line + j * 4 + 2, 0x00, 1);
+			memset(fb->screen_base + i * line + j * 4 + 3, 0x00, 1);
+		}
+	}
+
+	for (i = height * 2; i < height * 3; i++) {
+		for (j = 0; j < fb->var.xres; j++) {
+			memset(fb->screen_base + i * line + j * 4 + 0, 0x00, 1);
+			memset(fb->screen_base + i * line + j * 4 + 1, 0x00, 1);
+			memset(fb->screen_base + i * line + j * 4 + 2, 0xff, 1);
+			memset(fb->screen_base + i * line + j * 4 + 3, 0x00, 1);
+		}
+	}
+
+	for (i = height * 3; i < height * 4; i++) {
+		for (j = 0; j < fb->var.xres; j++) {
+			memset(fb->screen_base + i * line + j * 4 + 0, 0x00, 1);
+			memset(fb->screen_base + i * line + j * 4 + 1, 0x00, 1);
+			memset(fb->screen_base + i * line + j * 4 + 2, 0x00, 1);
+			memset(fb->screen_base + i * line + j * 4 + 3, 0xff, 1);
+		}
+	}
+	
+	for (i = height * 4; i < height * 5; i++) {
+		for (j = 0; j < fb->var.xres; j++) {
+			memset(fb->screen_base + i * line + j * 4 + 0, 0xff, 1);
+			memset(fb->screen_base + i * line + j * 4 + 1, 0xff, 1);
+			memset(fb->screen_base + i * line + j * 4 + 2, 0xff, 1);
+			memset(fb->screen_base + i * line + j * 4 + 3, 0x00, 1);
+		}
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(draw_rgb888_screen);
+
